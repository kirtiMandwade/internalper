<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<jpa:repositories base-package="com.pervacio.adminportal"
		entity-manager-factory-ref="entityManagerFactoryBean"></jpa:repositories>

	<!-- It register the beans in context and scan the annotations inside beans
		and activate them -->
	<context:component-scan base-package="com.pervacio.adminportal" />

	<!-- This allow for dispatching requests to Controllers by registering two
		beans - DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter -->
	<mvc:annotation-driven />

	<!-- This helps in mapping the logical view names to directly view files
		under a certain pre-configured directory -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<mvc:resources mapping="/resources/**" location="/resources/" />



	<bean id="entityManagerFactoryBean"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- This makes /META-INF/persistence.xml is no longer necessary -->
		<property name="packagesToScan" value="com.pervacio.adminportal" />
		<!-- JpaVendorAdapter implementation for Hibernate EntityManager. Exposes
			Hibernate's persistence provider and EntityManager extension interface -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				 <!-- <prop key="hibernate.hbm2ddl.auto">create</prop> -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<!-- <prop key="hibernate.show_sql">true</prop> -->
				<prop key="hibernate.enable_lazy_load_no_trans">true</prop>


			</props>
		</property>
	</bean>


	<!-- to upload files -->

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	</bean>



	<!-- Simple implementation of the standard JDBC DataSource interface, configuring
		the plain old JDBC DriverManager via bean properties -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/admintest"/>
		<property name="username" value="root" />
		<property name="password" value="root" />
	</bean>

	<!-- This transaction manager is appropriate for applications that use a
		single JPA EntityManagerFactory for transactional data access. JTA (usually
		through JtaTransactionManager) is necessary for accessing multiple transactional
		resources within the same transaction. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryBean" />
	</bean>

	<!-- responsible for registering the necessary Spring components that power
		annotation-driven transaction management; such as when @Transactional methods
		are invoked -->
	<tx:annotation-driven />

</beans>